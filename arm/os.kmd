KMD
00000000:             ; ORIGIN &00000000
00000000: EA000008    ; B hard_reset                          ; +0   (00)
00000004: EA000079    ; B undefined_instruction_handler       ; +4   (04)
00000008: EA0000AE    ; B svc_handler                         ; +8   (08)
0000000C: EA000078    ; B prefetch_abort_handler              ; +12  (0C)
00000010: EA000078    ; B data_abort_handler                  ; +16  (10)
00000014: E1A00000    ; NOP                                   ; +20  (14)
00000018: EA000077    ; B IRQ_handler                         ; +24  (18)
0000001C: EA0000A8    ; B FIQ_handler                         ; +28  (1C)
00000020:             ; 
00000020:             ; halt ; should be jumped to, to stop the proccessor
00000020: E1A00000    ; MOV R0, R0
00000024: EAFFFFFD    ; B halt
00000028:             ; 
00000028:             ; ; Import handlers
00000028:             ; INCLUDE handlers/reset_handler.s
00000028:             ; hard_reset
00000028:             ; ; Resets the proccessor to a known state, is also run at boot
00000028: E3A00000    ; MOV R0, #0
0000002C: E3A01000    ; MOV R1, #0
00000030: E3A02000    ; MOV R2, #0
00000034: E3A03000    ; MOV R3, #0
00000038: E3A04000    ; MOV R4, #0
0000003C: E3A05000    ; MOV R5, #0
00000040: E3A06000    ; MOV R6, #0
00000044: E3A07000    ; MOV R7, #0
00000048: E3A08000    ; MOV R8, #0
0000004C: E3A09000    ; MOV R9, #0
00000050: E3A0A000    ; MOV R10, #0
00000054: E3A0B000    ; MOV R11, #0
00000058: E3A0C000    ; MOV R12, #0
0000005C:             ; 
0000005C:             ; ; set stacks in use to none
0000005C: E28F0FF6    ; ADRL R0, stacks_in_use
00000060: E2800B0A    ; 
00000064: E3E01000    ; MOV R1, #-1
00000068:             ; set_stack_loop
00000068: E4801004    ; STR R1, [R0], #4
0000006C: E2822001    ; ADD R2, R2, #1
00000070: E3520004    ; CMP R2, #MAX_THREADS
00000074: 1AFFFFFB    ; BNE set_stack_loop
00000078:             ; 
00000078:             ; 
00000078:             ; ; setup IO
00000078: E58F0924    ; STR R0, cursorposx
0000007C: E58F0924    ; STR R0, cursorposy
00000080: E3A000FF    ; MOV R0, #&FF
00000084: E59F1920    ; LDR R1, addr_LCD
00000088: E59F2920    ; LDR R2, addr_LCD_end
0000008C:             ; 
0000008C:             ; screenblankloop
0000008C: E4C10001    ; STRB R0, [R1], #1
00000090: E1520001    ; CMP R2, R1
00000094: 1AFFFFFC    ; BNE screenblankloop
00000098:             ; 
00000098:             ; 
00000098:             ; ;setup timer
00000098: E3A0000C    ; MOV R0, #FF
0000009C: E59F1928    ; LDR R1, addr_timer_compare
000000A0: E5010000    ; STR R0, [R1]
000000A4: E59F1924    ; LDR R1, addr_timer_enable
000000A8: E5110000    ; LDR R0, [R1]
000000AC: E3C00003    ; BIC R0, R0, #&03
000000B0: E3800001    ; ORR R0, R0, #&01
000000B4: E5010000    ; STR R0, [R1]
000000B8: E28FDFE3    ; ADRL SP, stackend_svc
000000BC: E28DDB2E    ; 
000000C0:             ; 
000000C0:             ; ; clear queues
000000C0: E28F1E91    ; ADRL R1, addr_thread_queue_start
000000C4: E2811000    ; 
000000C8: EB000220    ; BL clear_queue
000000CC: E28F1F46    ; ADRL R1, addr_thread_IO_queue_start
000000D0: E2811B02    ; 
000000D4: EB00021D    ; BL clear_queue
000000D8:             ; 
000000D8:             ; ; wipe old register PCs
000000D8:             ; ; for regular threads
000000D8: E28F1F47    ; ADRL R1, thread_queue_register_map
000000DC: E2811B02    ; 
000000E0: E3E02000    ; MOV R2, #-1 ; write unusual value to PC location to indicate garbage
000000E4: E3A03000    ; MOV R3, #0
000000E8:             ; 
000000E8:             ; thread_register_wipe_loop_1
000000E8: E4812004    ; STR R2, [R1], #4
000000EC: E2833001    ; ADD R3, R3, #1
000000F0: E3530004    ; CMP R3, #MAX_THREADS
000000F4: 1AFFFFFB    ; BNE thread_register_wipe_loop_1
000000F8:             ; 
000000F8:             ; 
000000F8:             ; ; wipe previous actual registers
000000F8:             ; ; for regular threads
000000F8: E28F1F43    ; ADRL R1, thread_queue_registers
000000FC: E2811B02    ; 
00000100: E28F2F85    ; ADRL R2, thread_queue_registers_end
00000104: E2822B02    ; 
00000108: E3A03000    ; MOV  R3, #0
0000010C:             ; thread_register_wipe_loop_2
0000010C: E4813004    ; STR R3, [R1], #4
00000110: E1510002    ; CMP R1, R2
00000114: 1AFFFFFC    ; BNE thread_register_wipe_loop_2
00000118:             ; 
00000118:             ; 
00000118:             ; ;for IO threads
00000118: E28F1F7F    ; ADRL R1, thread_IO_queue_register_map
0000011C: E2811B02    ; 
00000120: E3E02000    ; MOV R2, #-1
00000124: E3A03000    ; MOV R3, #0
00000128:             ; 
00000128:             ; thread_IO_register_wipe_loop
00000128: E4812004    ; STR R2, [R1], #4
0000012C: E2833001    ; ADD R3, R3, #1
00000130: E3530004    ; CMP R3, #MAX_THREADS
00000134: 1AFFFFFB    ; BNE thread_IO_register_wipe_loop
00000138:             ; 
00000138:             ; 
00000138:             ; 
00000138:             ; ;setup interrupts
00000138: E59F1888    ; LDR  R1, addr_interrupts_mask
0000013C: E5510000    ; LDRB R0, [R1]
00000140: E3C000C1    ; BIC  R0, R0, #&C1
00000144: E38000C1    ; ORR  R0, R0, #&C1
00000148: E5410000    ; STRB R0, [R1]
0000014C:             ; 
0000014C:             ; ;wipe debounce map
0000014C: E28F1D21    ; ADRL R1, addr_keyboard_map_start
00000150: E2811000    ; 
00000154: E28F2044    ; ADRL R2, addr_keyboard_map_end
00000158: E2822B02    ; 
0000015C: E3A03000    ; MOV  R3, #0
00000160:             ; debounce_wipe_loop
00000160: E4C13001    ; STRB R3, [R1], #1
00000164: E1510002    ; CMP R1, R2
00000168: 1AFFFFFC    ; BNE debounce_wipe_loop
0000016C: E59F1848    ; LDR R1, addr_keyboard_req
00000170: E3A02001    ; MOV R2, #1
00000174: E5412000    ; STRB R2, [R1]
00000178:             ; 
00000178: E10F0000    ; MRS  R0, CPSR
0000017C: E3C000C0    ; BIC  R0, R0, #&C0             ;set bit 6,7 to 0 to enable FIQ and IRQ
00000180: E3C0001F    ; BIC  R0, R0, #&1F
00000184: E3800012    ; ORR  R0, R0, #&12
00000188: E121F000    ; MSR  CPSR_c, R0               ;switch to IRQ
0000018C: E28FDFAE    ; ADRL SP, stackend_IRQ
00000190: E28DDB32    ; 
00000194:             ; 
00000194: E10F0000    ; MRS  R0, CPSR
00000198: E3C0001F    ; BIC  R0, R0, #&1F
0000019C: E3800011    ; ORR  R0, R0, #&11
000001A0: E121F000    ; MSR  CPSR_c, R0               ;switch to FIQ
000001A4: E28FDEAA    ; ADRL SP, stackend_FIQ
000001A8: E28DDA0D    ; 
000001AC:             ; 
000001AC:             ; 
000001AC: E10F0000    ; MRS  R0, CPSR
000001B0: E3C0001F    ; BIC  R0, R0, #&1F
000001B4: E3800010    ; ORR  R0, R0, #&10
000001B8: E121F000    ; MSR  CPSR_c, R0               ;switch to user
000001BC:             ; 
000001BC:             ; ; set stack to first position, all stacks should be clear as reset has occured
000001BC: E28F0F9E    ; ADRL R0, stacks_in_use
000001C0: E2800B0A    ; 
000001C4: E3A01001    ; MOV R1, #1
000001C8: E5001000    ; STR R1, [R0]
000001CC: E28F0F9E    ; ADRL R0, stack_threads
000001D0: E2800B0A    ; 
000001D4: E3A01A02    ; MOV R1, #THREAD_STACK_SIZE_BYTES
000001D8: E0800001    ; ADD R0, R0, R1
000001DC: E1A0D000    ; MOV SP, R0
000001E0:             ; 
000001E0:             ; 
000001E0:             ; 
000001E0: E3A00000    ; MOV R0, #0
000001E4: E3A01000    ; MOV R1, #0
000001E8: E3A02000    ; MOV R2, #0
000001EC:             ; 
000001EC: EA00373D    ; B usercode
000001F0:             ; ; End of hard_reset
000001F0:             ; 
000001F0:             ; INCLUDE handlers/instruction_handler.s
000001F0:             ; undefined_instruction_handler
000001F0: EAFFFF8A    ; B halt
000001F4:             ; 
000001F4:             ; INCLUDE handlers/prefetch_abort_handler.s
000001F4:             ; prefetch_abort_handler
000001F4:             ; ; TODO: Perform some sort of error handling 
000001F4: EAFFFF89    ; B halt
000001F8:             ; 
000001F8:             ; INCLUDE handlers/data_abort_handler.s
000001F8:             ; data_abort_handler
000001F8:             ; ; TODO: perform some sort of data abort
000001F8: EAFFFF88    ; B halt
000001FC:             ; 
000001FC:             ; INCLUDE handlers/IRQ_handler.s
000001FC:             ; IRQ_handler
000001FC:             ; ; TODO handle interrupts
000001FC: E92D1FFF    ; PUSH {R0 - R12}
00000200: E59F17BC    ; LDR  R1, addr_interrupts
00000204: E5511000    ; LDRB R1, [R1]
00000208: E3510000    ; CMP R1, #0
0000020C: 0A00000B    ; BEQ keyboard_interrupt
00000210: E2011001    ; AND R1, R1, #&01
00000214: E3510001    ; CMP R1, #&01
00000218: 0A000000    ; BEQ timer_interrupt
0000021C: EAFFFF7F    ; B halt
00000220:             ; 
00000220:             ; timer_interrupt
00000220:             ; ;Subtract 1 from the timer compare
00000220:             ; ;This essentially resets the timer compare
00000220:             ; ;Without this the interrupt seen at f200_0000 addressed by byte will never clear
00000220:             ; ;this IRQ_assert is RO
00000220:             ; ;timer details at page 12 in the lab manual
00000220: E59F17A4    ; LDR R1, addr_timer_compare
00000224: E5112000    ; LDR R2, [R1]
00000228: E2422001    ; SUB R2, R2, #1
0000022C: E3520000    ; CMP R2, #0
00000230: B3A020FF    ; MOVLT R2, #&FF
00000234: E5012000    ; STR R2, [R1]
00000238:             ; ; Save state
00000238: EA000112    ; B save_registers
0000023C:             ; ; Run Sheduler
0000023C:             ; 
0000023C: EA00001E    ; B IRQ_quit
00000240:             ; 
00000240:             ; keyboard_interrupt
00000240: E59F1774    ; LDR R1, addr_keyboard_req
00000244: E3A02001    ; MOV R2, #1
00000248: E5012000    ; STR R2, [R1] ; Call for data
0000024C: E59F0764    ; LDR R0, addr_keyboard
00000250: E5500000    ; LDRB R0, [R0]
00000254: E2400020    ; SUB R0, R0, #32
00000258: E59F1760    ; LDR R1, addr_keyboard_dir
0000025C: E5511000    ; LDRB R1, [R1]
00000260:             ; 
00000260:             ; ; Divide R0 by 8
00000260: E3A03000    ; MOV R3, #0
00000264:             ; 
00000264:             ; continueDivisionLoop
00000264: E2400008    ; SUB R0, R0, #8
00000268: E3500000    ; CMP R0, #0
0000026C: BA000001    ; BLT exitDivision
00000270: E2833001    ; ADD R3, R3, #1
00000274: EAFFFFFA    ; B continueDivisionLoop
00000278:             ; 
00000278:             ; 
00000278:             ; exitDivision
00000278: E2800008    ; ADD R0, R0, #8 ; at this point R0: Remainder R3: Result
0000027C: E28F4E71    ; ADRL R4, addr_keyboard_map_start
00000280: E2844000    ; 
00000284: E0844003    ; ADD R4, R4, R3
00000288: E5547000    ; LDRB R7, [R4] ; Get the key byte into R4
0000028C: E3A05001    ; MOV R5, #1
00000290: E3A06000    ; MOV R6, #0
00000294: E0865015    ; ADD R5, R6, R5, LSL R0 ; Get Mask
00000298:             ; 
00000298: E3510000    ; CMP R1, #0
0000029C: 0A000000    ; BEQ unpushed
000002A0: 1A000002    ; BNE pushed
000002A4:             ; 
000002A4:             ; unpushed
000002A4: E1C77005    ; BIC R7, R7, R5
000002A8: E5447000    ; STRB R7, [R4]
000002AC: EA000002    ; B IRQ_quit
000002B0:             ; pushed
000002B0: E1877005    ; ORR R7, R7, R5
000002B4: E5447000    ; STRB R7, [R4]
000002B8: EAFFFFFF    ; B IRQ_quit
000002BC:             ; 
000002BC:             ; 
000002BC:             ; 
000002BC:             ; IRQ_quit
000002BC: E8BD1FFF    ; POP {R0 - R12}
000002C0: E25EF004    ; SUBS PC, LR, #4 ;return to usercode
000002C4:             ; 
000002C4:             ; INCLUDE handlers/FIQ_handler.s
000002C4:             ; FIQ_handler
000002C4:             ; ; TODO handle fast interrupts
000002C4: EAFFFF55    ; B halt
000002C8:             ; 
000002C8:             ; INCLUDE handlers/svc_handler.s
000002C8:             ; svc_handler
000002C8:             ; ; TODO: handle SVC calls
000002C8: E92D4000    ; PUSH {LR}
000002CC: E92D4000    ; PUSH {R14}
000002D0: E92D0001    ; PUSH {R0}
000002D4: E10F0000    ; MRS  R0, CPSR                       ;Enables interrupts while in SVC
000002D8: E3C000C0    ; BIC  R0, R0, #&C0                   ;Not sure if this is ok currently
000002DC: E121F000    ; MSR  CPSR_c, R0
000002E0: E8BD0001    ; POP {R0}
000002E4:             ; 
000002E4:             ; 
000002E4: E51EE004    ; LDR R14, [LR, #-4]                  ; Read the caller svc instruction into R14
000002E8: E3CEE4FF    ; BIC R14, R14, #&FF000000            ; Clear the opcode (24 bit can now be read)
000002EC:             ; 
000002EC:             ; svc_entry
000002EC: E92D0008    ; PUSH {R3}
000002F0: E59F36A8    ; LDR R3, SVC_MAX
000002F4: E15E0003    ; CMP R14, R3                   ; Check SVC < SVC_MAX
000002F8: E8BD0008    ; POP {R3}
000002FC: 8A000027    ; BHI SVC_unknown
00000300: E24EEC01    ; SUB R14, R14, #&100                 ; Normalise base of SVCs
00000304:             ; 
00000304: E08FE10E    ; ADD R14, PC, R14, LSL #2            ; Calculate SVC jump point in the table
00000308: E51EF000    ; LDR PC, [R14]                   ; Perform Jump
0000030C:             ; 
0000030C:             ; 
0000030C:             ; ; Jump table
0000030C: 00000338    ; DEFW SVC_0  ; halt
00000310: 0000033C    ; DEFW SVC_1  ; printchar
00000314: 00000344    ; DEFW SVC_2  ; printstr
00000318: 0000034C    ; DEFW SVC_3  ; timer
0000031C: 00000360    ; DEFW SVC_4  ; button data
00000320: 00000364    ; DEFW SVC_5  ; set cursorposx
00000324: 0000036C    ; DEFW SVC_6  ; set cursorposy
00000328: 00000374    ; DEFW SVC_7  ; query_keyboard
0000032C: 0000037C    ; DEFW SVC_8  ; query_key
00000330: 00000384    ; DEFW SVC_9  ; create_thread
00000334: 0000038C    ; DEFW SVC_10 ; end_thread
00000338:             ; 
00000338:             ; SVC_0
00000338: EAFFFF38    ; B halt
0000033C:             ; 
0000033C:             ; SVC_1
0000033C: EB000018    ; BL printchar
00000340: EA000013    ; B SVC_exit
00000344:             ; 
00000344:             ; SVC_2
00000344: EB00009C    ; BL printstr
00000348: EA000011    ; B SVC_exit
0000034C:             ; 
0000034C:             ; SVC_3
0000034C: E92D0001    ; PUSH {R0}
00000350: E59F065C    ; LDR R0, addr_timer
00000354: E5100000    ; LDR R0, [R0]
00000358: E8BD0001    ; POP {R0}        ;TODO: Fix?
0000035C: EA00000C    ; B SVC_exit
00000360:             ; 
00000360:             ; SVC_4
00000360: EA00000B    ; B SVC_exit
00000364:             ; 
00000364:             ; SVC_5
00000364: EB00009F    ; BL set_cursorposx
00000368: EA000009    ; B SVC_exit
0000036C:             ; 
0000036C:             ; SVC_6
0000036C: EB0000A3    ; BL set_cursorposy
00000370: EA000007    ; B SVC_exit
00000374:             ; 
00000374:             ; SVC_7
00000374: EB0000A7    ; BL query_keyboard
00000378: EA000005    ; B SVC_exit
0000037C:             ; 
0000037C:             ; SVC_8
0000037C: EB0000BC    ; BL query_key
00000380: EA000003    ; B SVC_exit
00000384:             ; 
00000384:             ; SVC_9
00000384: EB0000FF    ; BL create_thread
00000388: EA000001    ; B SVC_exit
0000038C:             ; 
0000038C:             ; SVC_10
0000038C: EB00012A    ; BL end_thread
00000390: EAFFFFFF    ; B SVC_exit
00000394:             ; 
00000394:             ; SVC_exit
00000394:             ; ;PUSH {R0}
00000394:             ; ;MRS R0, CPSR
00000394:             ; ;BIC R0, R0, #&C0
00000394:             ; ;MSR CPSR_c, R0
00000394:             ; ;POP {R0}
00000394: E8BD4000    ; POP {R14}
00000398: E8BD4000    ; POP {LR}
0000039C: E1B0F00E    ; MOVS PC, LR                        ; Return to usercode, change mode
000003A0:             ; 
000003A0:             ; SVC_unknown
000003A0: EAFFFF1E    ; B halt
000003A4:             ; 
000003A4:             ; 
000003A4:             ; ; Import definitions
000003A4:             ; INCLUDE general/printchar.s
000003A4:             ; printchar  ; character to be printed held in R0 in ASCII
000003A4:             ;            ; Address of 6 bytes representing character and background RGB held in R1
000003A4: E92D4000    ; PUSH {LR}
000003A8: E92D1FFF    ; PUSH {R0-R12}
000003AC:             ; 
000003AC: E1A04000    ; MOV R4, R0
000003B0: E354007F    ; CMP R4, #127
000003B4: AA00007F    ; BGE unknown_character
000003B8: E3540007    ; CMP R4, #7
000003BC: DA00007D    ; BLE unknown_character
000003C0: E354000D    ; CMP R4, #13
000003C4: DA000008    ; BLE control_handler
000003C8: E3540020    ; CMP R4, #32
000003CC: BA000079    ; BLT unknown_character ; if this fails, R4, contains a legal character
000003D0:             ; 
000003D0: E28F0074    ; ADRL R0, font_32
000003D4: E2800B36    ; 
000003D8: E2444020    ; SUB  R4, R4, #32
000003DC: E3A05007    ; MOV  R5, #7
000003E0: E0040594    ; MUL  R4, R4, R5
000003E4: E0800004    ; ADD  R0, R0, R4
000003E8: EA000033    ; B character_write
000003EC:             ; 
000003EC:             ; control_handler
000003EC: E59F65B0    ; LDR  R6, cursorposx
000003F0: E59F75B0    ; LDR  R7, cursorposy
000003F4: E2444008    ; SUB R4, R4, #8
000003F8: E08F5104    ; ADD R5, PC, R4, LSL #2
000003FC: E515F000    ; LDR PC, [R5]
00000400:             ; 
00000400: 00000418    ; DEFW BS_handler
00000404: 00000438    ; DEFW HT_handler
00000408: 00000458    ; DEFW LF_handler
0000040C: 00000468    ; DEFW VT_handler
00000410: 00000478    ; DEFW FF_handler
00000414: 00000494    ; DEFW CR_handler
00000418:             ; 
00000418:             ; BS_handler
00000418: E2466001    ; SUB R6, R6, #1
0000041C: E3560000    ; CMP R6, #0
00000420: AA000020    ; BGE control_exit
00000424: E3A06000    ; MOV R6, #0
00000428: E2477001    ; SUB R7, R7, #1
0000042C: E3570000    ; CMP R7, #0
00000430: B3A07000    ; MOVLT R7, #0
00000434: EA00001B    ; B control_exit
00000438:             ; 
00000438:             ; HT_handler
00000438: E2866001    ; ADD R6, R6, #1
0000043C: E3560028    ; CMP R6, #lcd_char_length
00000440: 1A000018    ; BNE control_exit
00000444: E3A06000    ; MOV R6, #0
00000448: E2877001    ; ADD R7, R7, #1
0000044C: E357001E    ; CMP R7, #lcd_char_height
00000450: 03A07000    ; MOVEQ R7, #0
00000454: EA000013    ; B control_exit
00000458:             ; 
00000458:             ; LF_handler
00000458: E2877001    ; ADD R7, R7, #1
0000045C: E357001E    ; CMP R7, #lcd_char_height
00000460: 03A07000    ; MOVEQ R7, #0
00000464: EA00000F    ; B control_exit
00000468:             ; 
00000468:             ; VT_handler
00000468: E2477001    ; SUB R7, R7, #1
0000046C: E3570000    ; CMP R7, #0
00000470: B3A07000    ; MOVLT R7, #0
00000474: EA00000B    ; B control_exit
00000478:             ; 
00000478:             ; FF_handler
00000478: E3A0A0FF    ; MOV R10, #&FF
0000047C: E59F8528    ; LDR R8, addr_LCD
00000480: E59F9528    ; LDR R9, addr_LCD_end
00000484:             ; screenblankloop2
00000484: E4C8A001    ; STRB R10, [R8], #1
00000488: E1580009    ; CMP R8, R9
0000048C: 1AFFFFFC    ; BNE screenblankloop2
00000490: EA000004    ; B control_exit
00000494:             ; 
00000494:             ; CR_handler
00000494: E2877001    ; ADD R7, R7, #1
00000498: E357001E    ; CMP R7, #lcd_char_height
0000049C: 03A07000    ; MOVEQ R7, #0
000004A0: E3A06000    ; MOV R6, #0
000004A4: EAFFFFFF    ; B control_exit
000004A8:             ; 
000004A8:             ; control_exit
000004A8: E58F64F4    ; STR R6, cursorposx
000004AC: E58F74F4    ; STR R7, cursorposy
000004B0: E8BD1FFF    ; POP {R0-R12}
000004B4: E8BD4000    ; POP {LR}
000004B8: E1A0F00E    ; MOV PC, LR
000004BC:             ; 
000004BC:             ; 
000004BC:             ; character_write
000004BC: E59F44E0    ; LDR R4, cursorposx                   ; Calculate the correct address to write to
000004C0: E3A05018    ; MOV R5, #charwidth
000004C4: E0040594    ; MUL R4, R4, R5
000004C8: E59F54D8    ; LDR R5, cursorposy
000004CC: E3A06C1E    ; MOV R6, #LCD_linediff
000004D0: E0050695    ; MUL R5, R5, R6
000004D4: E0844005    ; ADD R4, R4, R5
000004D8: E59F54CC    ; LDR R5, addr_LCD
000004DC: E0844005    ; ADD R4, R4, R5                       ; R4 now holds the top left address for the char to write 
                      ; to
000004E0: E3E05000    ; MOV R5, #-1                          ; R5 counts the width of the char (1-7 inc)
000004E4: E3A06000    ; MOV R6, #0                           ; R6 counts the height of the char (1-8 inc)
000004E8: E3A07001    ; MOV R7, #1                           ; R7 is the value to compare too
000004EC: E3A08000    ; MOV R8, #0                           ; R8 contains the font data i am querying
000004F0: EA000002    ; B post_address_fetch
000004F4:             ; 
000004F4:             ; font_line_return
000004F4: E3750001    ; CMP R5, #-1
000004F8: 0A000000    ; BEQ post_address_fetch
000004FC:             ; 
000004FC: E7D08005    ; LDRB R8, [R0, R5]
00000500:             ; post_address_fetch
00000500: E0089007    ; AND R9, R8, R7
00000504: E1590007    ; CMP R9, R7
00000508: 0A00001A    ; BEQ pixel_font
0000050C: 1A000020    ; BNE pixel_background
00000510:             ; 
00000510:             ; pixel_write_return
00000510: E2866001    ; ADD R6, R6, #1                       ; perform height increments
00000514: E0877007    ; ADD R7, R7, R7
00000518: E2844D0F    ; ADD R4, R4, #LCD_width
0000051C: E3560008    ; CMP R6, #8
00000520: 1AFFFFF3    ; BNE font_line_return
00000524:             ; 
00000524: E3A06000    ; MOV R6, #0                           ; reset R6 and R7
00000528: E3A07001    ; MOV R7, #1
0000052C: E2855001    ; ADD R5, R5, #1                       ; perform width increments
00000530: E3550007    ; CMP R5, #7
00000534: E2444C1E    ; SUB R4, R4, #LCD_linediff
00000538:             ; ;ADD R4, R4, #LCD_width
00000538: E2844003    ; ADD R4, R4, #3
0000053C: 1AFFFFEC    ; BNE font_line_return
00000540:             ; 
00000540: E59F445C    ; LDR R4, cursorposx
00000544: E59F545C    ; LDR R5, cursorposy
00000548: E2844001    ; ADD R4, R4, #1
0000054C: E3540028    ; CMP R4, #lcd_char_length
00000550: A3A04000    ; MOVGE R4, #0
00000554: A2855001    ; ADDGE R5, R5, #1
00000558: E355001E    ; CMP R5, #lcd_char_height
0000055C: A3A04000    ; MOVGE R4, #0
00000560: A3A05000    ; MOVGE R5, #0
00000564: E58F4438    ; STR R4, cursorposx
00000568: E58F5438    ; STR R5, cursorposy
0000056C:             ; 
0000056C: E8BD1FFF    ; POP {R0-R12}
00000570: E8BD4000    ; POP {LR}
00000574: E1A0F00E    ; MOV PC, LR
00000578:             ; 
00000578:             ; 
00000578:             ; pixel_font
00000578: E4D1A001    ; LDRB R10, [R1], #1                   ; Load the R byte to R10, increment address to point to G 
                      ; byte
0000057C: E4C4A001    ; STRB R10, [R4], #1
00000580: E4D1A001    ; LDRB R10, [R1], #1                   ; Load the G byte to R10, increment address to point to B 
                      ; byte
00000584: E4C4A001    ; STRB R10, [R4], #1
00000588: E451A002    ; LDRB R10, [R1], #-2                  ; Load the B byte to R10, point address at R byte
0000058C: E444A002    ; STRB R10, [R4], #-2                  ; routine ends pointing at the pixel just coloured
00000590: EAFFFFDE    ; B pixel_write_return
00000594:             ; 
00000594:             ; pixel_background
00000594: E2811003    ; ADD  R1, R1, #3
00000598: E4D1A001    ; LDRB R10, [R1], #1                   ; Load the R byte to R10, increment address to point to G 
                      ; byte
0000059C: E4C4A001    ; STRB R10, [R4], #1
000005A0: E4D1A001    ; LDRB R10, [R1], #1                   ; Load the G byte to R10, increment address to point to B 
                      ; byte
000005A4: E4C4A001    ; STRB R10, [R4], #1
000005A8: E451A002    ; LDRB R10, [R1], #-2                  ; Load the B byte to R10, point address at R byte
000005AC: E444A002    ; STRB R10, [R4], #-2                  ; routine ends pointing at the pixel just coloured
000005B0: E2411003    ; SUB  R1, R1, #3
000005B4: EAFFFFD5    ; B pixel_write_return
000005B8:             ; 
000005B8:             ; unknown_character                    ; TODO: Add some sort of error handler?
000005B8: EAFFFE98    ; B halt
000005BC:             ; 
000005BC:             ; INCLUDE general/printstring.s
000005BC:             ; printstr
000005BC:             ; ; R0 - Address of first char of target string
000005BC:             ; ; R1 - Address of RGB data
000005BC: E92D4000    ; PUSH {LR}
000005C0: E92D1FFF    ; PUSH {R0-R12}
000005C4:             ; 
000005C4: E1A04000    ; MOV R4, R0
000005C8:             ; printloop
000005C8: E4D40001    ; LDRB R0, [R4], #1        ; Get ascii code to printstr
000005CC: E3500000    ; CMP R0, #0
000005D0: 0A000001    ; BEQ printstr_exit
000005D4: EBFFFF72    ; BL printchar
000005D8: EAFFFFFA    ; B printloop
000005DC:             ; 
000005DC:             ; 
000005DC:             ; printstr_exit
000005DC: E8BD1FFF    ; POP {R0-R12}
000005E0: E8BD4000    ; POP {LR}
000005E4: E1A0F00E    ; MOV PC, LR
000005E8:             ; 
000005E8:             ; INCLUDE general/cursorcontrol.s
000005E8:             ; ; reads position from R2
000005E8:             ; 
000005E8:             ; 
000005E8:             ; set_cursorposx ; 0 <= R2 < 40
000005E8: E3520028    ; CMP R2, #lcd_char_length
000005EC: AAFFFE8B    ; BGE halt
000005F0: E3520000    ; CMP R2, #0
000005F4: DAFFFE89    ; BLE halt
000005F8: E58F23A4    ; STR R2, cursorposx
000005FC: E1A0F00E    ; MOV PC, LR
00000600:             ; 
00000600:             ; 
00000600:             ; set_cursorposy ; 0 <= R2 < 30
00000600: E352001E    ; CMP R2, #lcd_char_height
00000604: AAFFFE85    ; BGE halt
00000608: E3520000    ; CMP R2, #0
0000060C: DAFFFE83    ; BLE halt
00000610: E58F2390    ; STR R2, cursorposy
00000614: E1A0F00E    ; MOV PC, LR
00000618:             ; 
00000618:             ; INCLUDE general/key_querys.s
00000618:             ; query_keyboard
00000618:             ; ; Reads first key found into R3
00000618:             ; ; If not key is found R3 <- 0
00000618: E92D4000    ; PUSH {LR}
0000061C: E92D1FF0    ; PUSH {R4 - R12}
00000620: E28F4FDB    ; ADRL R4, addr_keyboard_map_start ; R4: start of map
00000624: E28F5FDD    ; ADRL R5, addr_keyboard_map_end   ; R5: end of map
00000628: E3A06001    ; MOV  R6, #1                      ; R6: bit mask
0000062C: E3A08002    ; MOV  R8, #2                      ; R8: multiplier
00000630: E3A0B020    ; MOV  R11, #32                    ; R11: ascii character
00000634:             ;                                  ; R7: byte data
00000634:             ;                                  ; R9: working reg AND data
00000634:             ; keyboard_byte_loop
00000634: E3A06001    ; MOV R6, #1
00000638: E4D47001    ; LDRB R7, [R4], #1
0000063C:             ; keyboard_bit_loop
0000063C:             ; 
0000063C:             ; ;actual checks perfromed
0000063C: E0079006    ; AND R9, R7, R6
00000640: E1590006    ; CMP R9, R6
00000644: 01A0300B    ; MOVEQ R3, R11
00000648: 0A000006    ; BEQ quit
0000064C:             ; 
0000064C:             ; 
0000064C: E28BB001    ; ADD R11, R11, #1
00000650: E0060896    ; MUL R6, R6, R8
00000654: E3560C01    ; CMP R6, #256
00000658: 1AFFFFF7    ; BNE keyboard_bit_loop
0000065C: E1540005    ; CMP R4, R5
00000660: 1AFFFFF3    ; BNE keyboard_byte_loop
00000664: E3A03000    ; MOV R3, #0
00000668:             ; 
00000668:             ; quit
00000668: E8BD1FF0    ; POP {R4 - R12}
0000066C: E8BD4000    ; POP {LR}
00000670: E1A0F00E    ; MOV PC, LR
00000674:             ; 
00000674:             ; query_key
00000674:             ; ; Check if R3 ascii character is in map
00000674: E92D4000    ; PUSH {LR}
00000678: E8BD4000    ; POP {LR}
0000067C: E1A0F00E    ; MOV PC, LR
00000680:             ; 
00000680:             ; INCLUDE general/threading.s
00000680:             ; INCLUDE context_switch.s
00000680: 00000000    ; tempSP DEFW 0
00000684: 00000000    ; tempR1 DEFW 0
00000688:             ; 
00000688:             ; save_registers
00000688:             ; 
00000688: E24EE004    ; SUB LR, LR, #4 ; account for pipelining
0000068C: E28F1FD1    ; ADRL R1, addr_thread_queue_start
00000690: E1A0000E    ; MOV R0, LR
00000694:             ; 
00000694: E92D4000    ; PUSH {LR} ; push current PC onto queue
00000698: EB00007B    ; BL queue_push
0000069C: E28F1FD6    ; ADRL R1, thread_queue_register_map
000006A0: EB000021    ; BL get_free_position ;get the next free slot for saving
000006A4: E8BD4000    ; POP {LR}
000006A8: E501E000    ; STR LR, [R1] ; Put thread PC into map
000006AC:             ; 
000006AC:             ; ; calculate base register positions
000006AC: E3A03044    ; MOV R3, #4 * 17
000006B0: E0000390    ; MUL R0, R0, R3
000006B4: E28F1E35    ; ADRL R1, thread_queue_registers
000006B8: E0811000    ; ADD R1, R1, R0
000006BC:             ; ; save user CPSR
000006BC: E14F2000    ; MRS R2, SPSR
000006C0: E4812004    ; STR R2, [R1], #4
000006C4:             ; ; save user SP, LR
000006C4: E8E16000    ; STMIA R1!, {SP, LR}^
000006C8:             ; ; make copies of SP and base address
000006C8: E50F104C    ; STR R1, tempR1
000006CC: E8BD1FFF    ; POP{R0 - R12}
000006D0: E50FD058    ; STR SP, tempSP
000006D4:             ; ; get user registers back
000006D4:             ; ; setup base registers for user register saving
000006D4: E51FD058    ; LDR SP, tempR1
000006D8:             ; ; perform save
000006D8: E8ED1FFF    ; STMIA SP!, {R0 - R12}^
000006DC:             ; ; save thread PC
000006DC: E50DE000    ; STR LR, [SP]
000006E0:             ; ; get SP_irq back
000006E0: E51FD068    ; LDR SP, tempSP
000006E4: EAFFFFFF    ; B sheduler
000006E8:             ; 
000006E8:             ; sheduler
000006E8:             ; ; first step is to grab the oldest thread
000006E8: E28F1FBA    ; ADRL R1, addr_thread_queue_start
000006EC: EB000077    ; BL queue_pop
000006F0: E3710001    ; CMP R1, #-1
000006F4: 0AFFFE49    ; BEQ halt ; Out of threads
000006F8:             ; 
000006F8: E1A01000    ; MOV R1, R0
000006FC: E28F0FBE    ; ADRL R0, thread_queue_register_map
00000700:             ; ; search for thread in register map
00000700: EB000014    ; BL search_block
00000704: E3E02000    ; MOV R2, #-1
00000708: E5002000    ; STR R2, [R0]
0000070C: E3A03044    ; MOV R3, #4 * 17
00000710: E0010391    ; MUL R1, R1, R3
00000714: E28F3E2F    ; ADRL R3, thread_queue_registers
00000718: E0833001    ; ADD R3, R3, R1
0000071C:             ; 
0000071C:             ; 
0000071C:             ; 
0000071C:             ; 
0000071C:             ; 
0000071C:             ; ; clear timer interrupt register to ensure the restore procedure occurs atomically
0000071C:             ; ;LDR R0, addr_interrupts_mask
0000071C:             ; ;LDRB R1, [R0]
0000071C:             ; ;BIC R1, R1, #&01
0000071C:             ; ;STRB R1, [R0]
0000071C:             ; 
0000071C:             ; ; R3 contains base register
0000071C:             ; ; first restore CPSR
0000071C:             ; ; second restore SP LR
0000071C:             ; ; third restore user registers, PC return to code
0000071C:             ; thread_return ; used for debugging
0000071C: E8B30010    ; LDMIA R3!, {R4}
00000720: E161F004    ; MSR SPSR_c, R4
00000724: E8F36000    ; LDMIA R3!, {SP, LR}^
00000728: E8D39FFF    ; LDMIA R3, {R0 - R12, PC}^
0000072C:             ; 
0000072C:             ; 
0000072C:             ; 
0000072C:             ; 
0000072C:             ; get_free_position
0000072C:             ; ; IN R1 address of block (MAX_THREADS * 4)
0000072C:             ; ; OUT R0 index number
0000072C:             ; ; OUT R1 free address
0000072C: E92D003C    ; PUSH{R2 - R5}
00000730: E3A00000    ; MOV R0, #0
00000734:             ; get_free_not_found
00000734: E3500004    ; CMP R0, #MAX_THREADS
00000738: 0AFFFE38    ; BEQ halt
0000073C: E4912004    ; LDR R2, [R1], #4
00000740: E3720001    ; CMP R2, #-1
00000744: 12800001    ; ADDNE R0, R0, #1
00000748: 1AFFFFF9    ; BNE get_free_not_found
0000074C: E2411004    ; SUB R1, R1, #4
00000750:             ; 
00000750: E8BD003C    ; POP {R2 - R5}
00000754: E1A0F00E    ; MOV PC, LR
00000758:             ; 
00000758:             ; 
00000758:             ; search_block
00000758:             ; ; IN R0 address of block
00000758:             ; ; IN R1 target
00000758:             ; ; OUT R0 updated address
00000758:             ; ; OUT R1 index
00000758: E92D003C    ; PUSH {R2 - R5}
0000075C: E3A02000    ; MOV R2, #0
00000760:             ; search_block_loop_1
00000760: E3520004    ; CMP R2, #MAX_THREADS
00000764: 0AFFFE2D    ; BEQ halt
00000768: E4903004    ; LDR R3, [R0], #4
0000076C: E1530001    ; CMP R3, R1
00000770: 12822001    ; ADDNE R2, R2, #1
00000774: 1AFFFFF9    ; BNE search_block_loop_1
00000778: E2400004    ; SUB R0, R0, #4
0000077C: E1A01002    ; MOV R1, R2
00000780: E8BD003C    ; POP {R2 - R5}
00000784: E1A0F00E    ; MOV PC, LR
00000788:             ; 
00000788:             ; 
00000788:             ; 
00000788:             ; 
00000788:             ; 
00000788:             ; 
00000788:             ; 
00000788:             ; 
00000788:             ; 
00000788:             ; 
00000788:             ; 
00000788:             ; 
00000788:             ; 
00000788:             ; ;
00000788:             ; 
00000788:             ; create_thread
00000788:             ; ; IN R0 - Address of thread
00000788:             ; ; Note, a new thread will not have any cleared registers
00000788:             ; ; The CPSR for this thread will be set from the current thread
00000788:             ; ; The Stack pointer will be allocated but all other registers are undefined
00000788: E92D4000    ; PUSH {LR}
0000078C: E92D1FFE    ; PUSH {R1 - R12}
00000790: E28F1D09    ; ADRL R1, addr_thread_queue_start
00000794: E1A02000    ; MOV R2, R0
00000798: E3A05000    ; MOV R5, #0
0000079C: EB00003A    ; BL queue_push
000007A0:             ; 
000007A0:             ; ;setup stack
000007A0: E28F8094    ; ADRL R8, stacks_in_use
000007A4: E2888B09    ; 
000007A8: E3E09003    ; MOV R9, #-4
000007AC:             ; 
000007AC:             ; stack_search_loop
000007AC: E3590010    ; CMP R9, #4 * MAX_THREADS
000007B0: 0AFFFE1A    ; BEQ halt
000007B4: E2899004    ; ADD R9, R9, #4
000007B8: E798A009    ; LDR R10, [R8, R9]
000007BC: E37A0001    ; CMP R10, #-1
000007C0: 1AFFFFF9    ; BNE stack_search_loop
000007C4: E3A0A001    ; MOV R10, #1
000007C8: E788A009    ; STR R10, [R8, R9]
000007CC: E2899004    ; ADD R9, R9, #4                       ; stacks are full descending so point to 'end of stack'
000007D0: E3A0BB02    ; MOV R11, #THREAD_STACK_SIZE_WORDS    ; R9 Counts in words
000007D4: E0090B99    ; MUL R9, R9, R11
000007D8: E28FA06C    ; ADRL R10, stack_threads
000007DC: E28AAB09    ; 
000007E0: E089900A    ; ADD R9, R9, R10
000007E4:             ; 
000007E4:             ; 
000007E4:             ; 
000007E4:             ; 
000007E4: E28F1E21    ; ADRL R1, thread_queue_register_map
000007E8: E28F3F87    ; ADRL R3, thread_queue_registers
000007EC:             ; free_thread_search_loop
000007EC: E4914004    ; LDR R4, [R1], #4
000007F0: E3740001    ; CMP R4, #-1
000007F4: 12855001    ; ADDNE R5, R5, #1
000007F8: 0A000002    ; BEQ free_thread_found
000007FC: E1510003    ; CMP R1, R3
00000800: 0AFFFE06    ; BEQ halt
00000804: EAFFFFF8    ; B free_thread_search_loop
00000808:             ; 
00000808:             ; 
00000808:             ; 
00000808:             ; free_thread_found
00000808:             ; 
00000808: E5012004    ; STR R2, [R1, #-4]
0000080C:             ; ; Setup return registers
0000080C: E28F6F7E    ; ADRL R6, thread_queue_registers
00000810: E3A07044    ; MOV R7, #4 * 17
00000814: E0050795    ; MUL R5, R5, R7
00000818: E0866005    ; ADD R6, R6, R5
0000081C: E10F7000    ; MRS R7, CPSR
00000820: E4867004    ; STR R7, [R6], #4
00000824: E5069000    ; STR R9, [R6]
00000828: E286603C    ; ADD R6, R6, #15*4
0000082C: E5062000    ; STR R2, [R6]
00000830:             ; 
00000830:             ; 
00000830:             ; 
00000830: E8BD1FFE    ; POP {R1 - R12}
00000834: E8BD4000    ; POP {LR}
00000838: E1A0F00E    ; MOV PC, LR
0000083C:             ; 
0000083C:             ; end_thread
0000083C:             ; ; IN - R12 usermode SP
0000083C:             ; 
0000083C:             ; 
0000083C:             ; ; Needs to deallocate its stack pointer
0000083C:             ; ; there is no protections against stacks overrunning into each other, so this operation is like
                      ; ly to
0000083C:             ; ; have undefined behaviour in the event that a stack overrun occurs
0000083C:             ; 
0000083C:             ; 
0000083C:             ; ; Compare the stack pointer against potential positions
0000083C:             ; ; Assume there is no overflow as theres not much I can do about it
0000083C: E28F0008    ; ADRL R0, stack_threads
00000840: E2800B09    ; 
00000844: E2801A02    ; ADD R1, R0, #THREAD_STACK_SIZE_BYTES
00000848: E3A02000    ; MOV R2, #0 ; Thread counter (counts in 4's)
0000084C:             ; 
0000084C:             ; check_next_thread_loop
0000084C: E3520010    ; CMP R2, #MAX_THREADS * 4
00000850: 0AFFFDF2    ; BEQ halt ; SP index not found
00000854:             ; 
00000854:             ; ; check lower bound
00000854: E15C0000    ; CMP R12, R0
00000858: BAFFFDF0    ; BLT halt ; SP Should never be lower then the lower bound.
0000085C:             ; 
0000085C:             ; ; check upper bound
0000085C: E15C0001    ; CMP R12, R1  ; If (SP <= Upper bound) the index has been found
00000860: DA000003    ; BLE thread_index_found
00000864:             ; 
00000864:             ; ; increment counter and bounds
00000864: E2822004    ; ADD R2, R2, #4
00000868: E2800A02    ; ADD R0, R0, #THREAD_STACK_SIZE_BYTES
0000086C: E2811A02    ; ADD R1, R1, #THREAD_STACK_SIZE_BYTES
00000870: EAFFFFF5    ; B check_next_thread_loop
00000874:             ; 
00000874:             ; thread_index_found
00000874: E28F0D8F    ; ADRL R0, stacks_in_use
00000878: E2800000    ; 
0000087C: E0800002    ; ADD R0, R0, R2
00000880: E3E01000    ; MOV R1, #-1
00000884: E5001000    ; STR R1, [R0]
00000888:             ; 
00000888:             ; ;exit thread by picking up another.
00000888: EAFFFF96    ; B sheduler
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; 
0000088C:             ; ;
0000088C:             ; 
0000088C:             ; INCLUDE general/queue.s
0000088C:             ; ; This file handles queue operations for queues of size MAX_THREADS
0000088C:             ; queue_push
0000088C:             ; ; IN R0 - Item to push
0000088C:             ; ; IN R1 - Pointer to queue (Corrupts to -1 if push fails)
0000088C: E92D4000    ; PUSH {LR}
00000890: E92D1FFC    ; PUSH {R2 - R12}
00000894:             ; 
00000894:             ; ; Check queue for space
00000894: E2412004    ; SUB R2, R1, #4 ; Get address of counter
00000898: E5123000    ; LDR R3, [R2]
0000089C: E3530004    ; CMP R3, #MAX_THREADS
000008A0: AA000006    ; BGE fail_push
000008A4:             ; 
000008A4:             ; ; Perform push
000008A4: E0834003    ; ADD R4, R3, R3
000008A8: E0844004    ; ADD R4, R4, R4 ; R4 = item * 4
000008AC: E0814004    ; ADD R4, R1, R4 ; R4 = address + (item * 4)
000008B0: E5040000    ; STR R0, [R4]
000008B4:             ; 
000008B4:             ; ; Update Counter
000008B4: E2833001    ; ADD R3, R3, #1
000008B8: E5023000    ; STR R3, [R2]
000008BC: EA000000    ; B queue_push_quit
000008C0:             ; 
000008C0:             ; 
000008C0:             ; 
000008C0:             ; fail_push
000008C0: E3E01000    ; MOV R1, #-1
000008C4:             ; queue_push_quit
000008C4: E8BD1FFC    ; POP {R2 - R12}
000008C8: E8BD4000    ; POP {LR}
000008CC: E1A0F00E    ; MOV PC, LR
000008D0:             ; 
000008D0:             ; queue_pop
000008D0:             ; ; OUT R0 - Item popped
000008D0:             ; ; IN  R1 - Pointer to queue (Corrupts to -1 if push fails)
000008D0: E92D4000    ; PUSH {LR}
000008D4: E92D1FFC    ; PUSH {R2 - R12}
000008D8:             ; 
000008D8:             ; ; Check queue is non empty
000008D8: E2412004    ; SUB R2, R1, #4 ; Get address of counter
000008DC: E5123000    ; LDR R3, [R2]
000008E0: E3530000    ; CMP R3, #0
000008E4: 0A00000D    ; BEQ queue_pop_fail
000008E8:             ; 
000008E8:             ; ; Move queue[0] to output
000008E8: E2822004    ; ADD R2, R2, #4
000008EC: E5120000    ; LDR R0, [R2]
000008F0:             ; 
000008F0:             ; ; Perform MAX_THREADS-1 moves left
000008F0: E3A04003    ; MOV R4, #MAX_THREADS-1
000008F4:             ; queue_shift_loop
000008F4: E5B25004    ; LDR R5, [R2, #4]!
000008F8: E5225004    ; STR R5, [R2, #-4]!
000008FC: E2822004    ; ADD R2, R2, #4
00000900: E2444001    ; SUB R4, R4, #1
00000904: E3540000    ; CMP R4, #0
00000908: 1AFFFFF9    ; BNE queue_shift_loop
0000090C:             ; 
0000090C:             ; ; Update counter
0000090C: E2412004    ; SUB R2, R1, #4
00000910: E5123000    ; LDR R3, [R2]
00000914: E2433001    ; SUB R3, R3, #1
00000918: E5023000    ; STR R3, [R2]
0000091C: EA000000    ; B queue_pop_quit
00000920:             ; 
00000920:             ; 
00000920:             ; 
00000920:             ; queue_pop_fail
00000920: E3E01000    ; MOV R1, #-1
00000924:             ; queue_pop_quit
00000924: E8BD1FFC    ; POP {R2 - R12}
00000928: E8BD4000    ; POP {LR}
0000092C: E1A0F00E    ; MOV PC, LR
00000930:             ; 
00000930:             ; queue_utilisation
00000930:             ; ; OUT R0 - Counter Stat
00000930:             ; ; IN  R1 - Pointer to Queue
00000930: E92D4000    ; PUSH {LR}
00000934: E92D1FFC    ; PUSH {R2 - R12}
00000938:             ; 
00000938: E2411004    ; SUB R1, R1, #4
0000093C: E5110000    ; LDR R0, [R1]
00000940: E2811004    ; ADD R1, R1, #4
00000944:             ; 
00000944: E8BD1FFC    ; POP {R2 - R12}
00000948: E8BD4000    ; POP {LR}
0000094C: E1A0F00E    ; MOV PC, LR
00000950:             ; 
00000950:             ; clear_queue
00000950:             ; ; IN R1 - Pointer to Queue
00000950: E92D4000    ; PUSH {LR}
00000954: E92D0001    ; PUSH {R0}
00000958: E92D1FFC    ; PUSH {R2 - R12}
0000095C:             ; 
0000095C:             ; ; wipe body
0000095C: E3E00000    ; MOV R0, #-1
00000960: E3A02000    ; MOV R2, #0 ; Counter
00000964:             ; queue_wipe_loop
00000964: E7810002    ; STR R0, [R1, R2]
00000968: E2822004    ; ADD R2, R2, #4
0000096C: E3520010    ; CMP R2, #MAX_THREADS * 4
00000970: 1AFFFFFB    ; BNE queue_wipe_loop
00000974:             ; 
00000974:             ; ; reset item
00000974: E3A00000    ; MOV R0, #0
00000978: E2411004    ; SUB R1, R1, #4
0000097C: E5010000    ; STR R0, [R1]
00000980: E2811004    ; ADD R1, R1, #4
00000984:             ; 
00000984: E8BD1FFC    ; POP  {R2 - R12}
00000988: E8BD0001    ; POP  {R0}
0000098C: E8BD4000    ; POP  {LR}
00000990: E1A0F00E    ; MOV  PC, LR
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; 
00000994:             ; ;
00000994:             ; 
00000994:             ; INCLUDE definitions/keyboard_map.s
00000994:             ; addr_keyboard_map_start
00000994:             ; ; can be updated with more keys as needed
00000994:             ; 
00000994:             ; 
00000994: 00          ; DEFB 0x00 ; !"#$%&'
00000995: 00          ; DEFB 0x00 ;()*+,-./
00000996: 00          ; DEFB 0x00 ;01234567
00000997: 00          ; DEFB 0x00 ;89:;<=>?
00000998: 00          ; DEFB 0x00 ;@ABCDEFG
00000999: 00          ; DEFB 0x00 ;HIJKLMNO
0000099A: 00          ; DEFB 0x00 ;PQRSTUVW
0000099B: 00          ; DEFB 0x00 ;XYZ[/]^_
0000099C: 00          ; DEFB 0x00 ;`abcdefg
0000099D: 00          ; DEFB 0x00 ;hijklmno
0000099E: 00          ; DEFB 0x00 ;pqrstuvw
0000099F: 00          ; DEFB 0x00 ;xyz{|}~  
000009A0:             ; 
000009A0:             ; 
000009A0:             ; addr_keyboard_map_end
000009A0:             ; 
000009A0:             ; INCLUDE definitions/general_definitions.s
000009A0:             ; 
000009A0:             ; LCD_width       EQU   960
000009A0:             ; FONT_WIDTH      EQU     7
000009A0:             ; FONT_HEIGHT     EQU     8
000009A0:             ; BS              EQU     8
000009A0:             ; HT              EQU     9
000009A0:             ; LF              EQU    10
000009A0:             ; VT              EQU    11
000009A0:             ; FF              EQU    12
000009A0:             ; CR              EQU    13
000009A0:             ; ALIGN
000009A0:             ; 
000009A0:             ; INCLUDE definitions/OS_definitions.s
000009A0:             ; svc_0  EQU &100 ; halt
000009A0:             ; svc_1  EQU &101 ; print char
000009A0:             ; svc_2  EQU &102 ; print string
000009A0:             ; svc_3  EQU &103 ; get timer
000009A0:             ; svc_4  EQU &104 ; button data
000009A0:             ; svc_5  EQU &105 ; set cursorposx
000009A0:             ; svc_6  EQU &106 ; set cursorposy
000009A0:             ; svc_7  EQU &107 ; query_keyboard
000009A0:             ; svc_8  EQU &108 ; query_key
000009A0:             ; svc_9  EQU &109 ; create_thread
000009A0:             ; svc_10 EQU &10A ; end_thread
000009A0: 0000010B    ; SVC_MAX DEFW &10B
000009A4:             ; ; stacks are defined here
000009A4: 00000000    ; cursorposx          DEFW 0
000009A8: 00000000    ; cursorposy          DEFW 0
000009AC: AC000000    ; addr_LCD            DEFW 0xAC00_0000
000009B0: AC0383FF    ; addr_LCD_end        DEFW 0xAC03_83FF
000009B4: F1001010    ; addr_timer          DEFW 0xF1001010
000009B8: F1002004    ; addr_keyboard       DEFW 0xF1002004
000009BC: F1002000    ; addr_keyboard_req   DEFW 0xF1002000
000009C0: F1002008    ; addr_keyboard_dir   DEFW 0xF1002008
000009C4: F2000000    ; addr_interrupts      DEFW 0xF2000000
000009C8: F2000001    ; addr_interrupts_mask DEFW 0xF2000001
000009CC: F1001014    ; addr_timer_compare   DEFW 0xF1001014
000009D0: F100100C    ; addr_timer_enable    DEFW 0xF100100C ;bit 0 = 1 means timer enabled
000009D4:             ; charwidth       EQU 24
000009D4:             ; LCD_linediff    EQU 7680
000009D4:             ; lcd_char_length EQU 40
000009D4:             ; lcd_char_height EQU 30
000009D4:             ; 
000009D4:             ; ALIGN
000009D4:             ; MAX_THREADS EQU 4
000009D4:             ; THREAD_STACK_SIZE_BYTES EQU &2000
000009D4:             ; THREAD_STACK_SIZE_WORDS EQU THREAD_STACK_SIZE_BYTES / 4
000009D4:             ; ; Define the space for address queues
000009D4:             ; ; Queues are defined as a Word of data followed by X words
000009D4:             ; thread
000009D4: 00000000    ; thread_queue_items DEFW 0
000009D8:             ; addr_thread_queue_start DEFS MAX_THREADS * 4
000009E8:             ; ;addr_thread_queue_end
000009E8:             ; 
000009E8: 00000000    ; thread_queue_IO_items DEFW 0
000009EC:             ; addr_thread_IO_queue_start DEFS MAX_THREADS * 4
000009FC:             ; ;addr_thread_IO_queue_end
000009FC:             ; 
000009FC:             ; 
000009FC:             ; 
000009FC:             ; ; Note, when naming these address I discovered the max length of a label is 32 characters
000009FC:             ; 
000009FC:             ; 
000009FC:             ; thread_queue_register_map DEFS MAX_THREADS * 4
00000A0C:             ; thread_queue_registers DEFS MAX_THREADS * 4 * 17 ; declares 17 words for each thread
00000B1C:             ; thread_queue_registers_end                       ; these register are not wiped in reset_handle
                      ; r.s
00000B1C:             ; 
00000B1C:             ; 
00000B1C:             ; thread_IO_queue_register_map DEFS MAX_THREADS * 4
00000B2C:             ; thread_IO_queue_registers DEFS MAX_THREADS * 4 * 17 ; declares 17 words for each thread
00000C3C:             ; ;thread_IO_queue_registers_end
00000C3C:             ; 
00000C3C:             ; ALIGN
00000C3C:             ; stack_user DEFS &2000
00002C3C:             ; stackend_user
00002C3C:             ; stacks_in_use DEFS 4 * MAX_THREADS
00002C4C:             ; stack_threads DEFS THREAD_STACK_SIZE_BYTES * MAX_THREADS
0000AC4C:             ; stackend_threads
0000AC4C:             ; 
0000AC4C:             ; stack_svc DEFS &1000
0000BC4C:             ; stackend_svc
0000BC4C:             ; 
0000BC4C:             ; stack_IRQ DEFS &1000
0000CC4C:             ; stackend_IRQ
0000CC4C:             ; 
0000CC4C:             ; stack_FIQ DEFS &1000
0000DC4C:             ; stackend_FIQ
0000DC4C:             ; ; Examples
0000DC4C:             ; ; thread_queue_register_map + 0x00 : PC (Thread 0)
0000DC4C:             ; ; thread_queue_register_map + 0x04 : PC (Thread 1)
0000DC4C:             ; ; thread_queue_register_map + 0x08 : PC (Thread 2)
0000DC4C:             ; ; thread_queue_register_map + 0x0C : PC (Thread 3)
0000DC4C:             ; ; thread_queue_registers + 0x00: CPSR (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x04: SP  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x08: LR  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x0C: R0  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x10: R1  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x14: R2  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x18: R3  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x1C: R4  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x20: R5  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x24: R6  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x28: R7  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x2C: R8  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x30: R9  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x34: R10  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x38: R11  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x3C: R12  (Thread 0)
0000DC4C:             ; ; thread_queue_registers + 0x40: PC   (Thread 0)
0000DC4C:             ; 
0000DC4C:             ; INCLUDE definitions/character_definitions.s
0000DC4C: 00 00 00 00 ; font_32 defb 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000DC50: 00 00 00    ; 
0000DC53: 5F 00 00 00 ; font_33 defb 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000DC57: 00 00 00    ; 
0000DC5A: 03 00 03 00 ; font_34 defb 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00
0000DC5E: 00 00 00    ; 
0000DC61: 14 7F 14 7F ; font_35 defb 0x14, 0x7f, 0x14, 0x7f, 0x14, 0x00, 0x00
0000DC65: 14 00 00    ; 
0000DC68: 6F 49 C9 7B ; font_36 defb 0x6f, 0x49, 0xc9, 0x7b, 0x00, 0x00, 0x00
0000DC6C: 00 00 00    ; 
0000DC6F: 63 13 08 64 ; font_37 defb 0x63, 0x13, 0x08, 0x64, 0x63, 0x00, 0x00
0000DC73: 63 00 00    ; 
0000DC76: 7F C9 49 63 ; font_38 defb 0x7f, 0xc9, 0x49, 0x63, 0x00, 0x00, 0x00
0000DC7A: 00 00 00    ; 
0000DC7D: 03 00 00 00 ; font_39 defb 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000DC81: 00 00 00    ; 
0000DC84: 3E 41 00 00 ; font_40 defb 0x3e, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00
0000DC88: 00 00 00    ; 
0000DC8B: 41 3E 00 00 ; font_41 defb 0x41, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00
0000DC8F: 00 00 00    ; 
0000DC92: 0A 04 1F 04 ; font_42 defb 0x0a, 0x04, 0x1f, 0x04, 0x0a, 0x00, 0x00
0000DC96: 0A 00 00    ; 
0000DC99: 08 08 3E 08 ; font_43 defb 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00
0000DC9D: 08 00 00    ; 
0000DCA0: C0 00 00 00 ; font_44 defb 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000DCA4: 00 00 00    ; 
0000DCA7: 08 08 08 08 ; font_45 defb 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00
0000DCAB: 00 00 00    ; 
0000DCAE: 40 00 00 00 ; font_46 defb 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000DCB2: 00 00 00    ; 
0000DCB5: 60 10 08 04 ; font_47 defb 0x60, 0x10, 0x08, 0x04, 0x03, 0x00, 0x00
0000DCB9: 03 00 00    ; 
0000DCBC: 7F 41 41 7F ; font_48 defb 0x7f, 0x41, 0x41, 0x7f, 0x00, 0x00, 0x00
0000DCC0: 00 00 00    ; 
0000DCC3: 01 7F 00 00 ; font_49 defb 0x01, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00
0000DCC7: 00 00 00    ; 
0000DCCA: 7B 49 49 6F ; font_50 defb 0x7b, 0x49, 0x49, 0x6f, 0x00, 0x00, 0x00
0000DCCE: 00 00 00    ; 
0000DCD1: 63 49 49 7F ; font_51 defb 0x63, 0x49, 0x49, 0x7f, 0x00, 0x00, 0x00
0000DCD5: 00 00 00    ; 
0000DCD8: 0F 08 08 7F ; font_52 defb 0x0f, 0x08, 0x08, 0x7f, 0x00, 0x00, 0x00
0000DCDC: 00 00 00    ; 
0000DCDF: 6F 49 49 7B ; font_53 defb 0x6f, 0x49, 0x49, 0x7b, 0x00, 0x00, 0x00
0000DCE3: 00 00 00    ; 
0000DCE6: 7F 49 49 7B ; font_54 defb 0x7f, 0x49, 0x49, 0x7b, 0x00, 0x00, 0x00
0000DCEA: 00 00 00    ; 
0000DCED: 03 01 01 7F ; font_55 defb 0x03, 0x01, 0x01, 0x7f, 0x00, 0x00, 0x00
0000DCF1: 00 00 00    ; 
0000DCF4: 7F 49 49 7F ; font_56 defb 0x7f, 0x49, 0x49, 0x7f, 0x00, 0x00, 0x00
0000DCF8: 00 00 00    ; 
0000DCFB: 0F 09 09 7F ; font_57 defb 0x0f, 0x09, 0x09, 0x7f, 0x00, 0x00, 0x00
0000DCFF: 00 00 00    ; 
0000DD02: 41 00 00 00 ; font_58 defb 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000DD06: 00 00 00    ; 
0000DD09: C1 00 00 00 ; font_59 defb 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000DD0D: 00 00 00    ; 
0000DD10: 08 14 22 00 ; font_60 defb 0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00
0000DD14: 00 00 00    ; 
0000DD17: 14 14 14 14 ; font_61 defb 0x14, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00
0000DD1B: 00 00 00    ; 
0000DD1E: 22 14 08 00 ; font_62 defb 0x22, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00
0000DD22: 00 00 00    ; 
0000DD25: 03 59 09 0F ; font_63 defb 0x03, 0x59, 0x09, 0x0f, 0x00, 0x00, 0x00
0000DD29: 00 00 00    ; 
0000DD2C: 7F 41 5D 55 ; font_64 defb 0x7f, 0x41, 0x5d, 0x55, 0x5f, 0x00, 0x00
0000DD30: 5F 00 00    ; 
0000DD33: 7F 09 09 7F ; font_65 defb 0x7f, 0x09, 0x09, 0x7f, 0x00, 0x00, 0x00
0000DD37: 00 00 00    ; 
0000DD3A: 7F 49 49 77 ; font_66 defb 0x7f, 0x49, 0x49, 0x77, 0x00, 0x00, 0x00
0000DD3E: 00 00 00    ; 
0000DD41: 7F 41 41 63 ; font_67 defb 0x7f, 0x41, 0x41, 0x63, 0x00, 0x00, 0x00
0000DD45: 00 00 00    ; 
0000DD48: 7F 41 41 3E ; font_68 defb 0x7f, 0x41, 0x41, 0x3e, 0x00, 0x00, 0x00
0000DD4C: 00 00 00    ; 
0000DD4F: 7F 49 49 63 ; font_69 defb 0x7f, 0x49, 0x49, 0x63, 0x00, 0x00, 0x00
0000DD53: 00 00 00    ; 
0000DD56: 7F 09 09 03 ; font_70 defb 0x7f, 0x09, 0x09, 0x03, 0x00, 0x00, 0x00
0000DD5A: 00 00 00    ; 
0000DD5D: 7F 41 49 7B ; font_71 defb 0x7f, 0x41, 0x49, 0x7b, 0x00, 0x00, 0x00
0000DD61: 00 00 00    ; 
0000DD64: 7F 08 08 7F ; font_72 defb 0x7f, 0x08, 0x08, 0x7f, 0x00, 0x00, 0x00
0000DD68: 00 00 00    ; 
0000DD6B: 41 7F 41 00 ; font_73 defb 0x41, 0x7f, 0x41, 0x00, 0x00, 0x00, 0x00
0000DD6F: 00 00 00    ; 
0000DD72: 60 40 40 7F ; font_74 defb 0x60, 0x40, 0x40, 0x7f, 0x00, 0x00, 0x00
0000DD76: 00 00 00    ; 
0000DD79: 7F 08 08 77 ; font_75 defb 0x7f, 0x08, 0x08, 0x77, 0x00, 0x00, 0x00
0000DD7D: 00 00 00    ; 
0000DD80: 7F 40 40 60 ; font_76 defb 0x7f, 0x40, 0x40, 0x60, 0x00, 0x00, 0x00
0000DD84: 00 00 00    ; 
0000DD87: 7F 01 01 7F ; font_77 defb 0x7f, 0x01, 0x01, 0x7f, 0x01, 0x01, 0x7f
0000DD8B: 01 01 7F    ; 
0000DD8E: 7F 01 01 7F ; font_78 defb 0x7f, 0x01, 0x01, 0x7f, 0x00, 0x00, 0x00
0000DD92: 00 00 00    ; 
0000DD95: 7F 41 41 7F ; font_79 defb 0x7f, 0x41, 0x41, 0x7f, 0x00, 0x00, 0x00
0000DD99: 00 00 00    ; 
0000DD9C: 7F 09 09 0F ; font_80 defb 0x7f, 0x09, 0x09, 0x0f, 0x00, 0x00, 0x00
0000DDA0: 00 00 00    ; 
0000DDA3: 7F 41 C1 7F ; font_81 defb 0x7f, 0x41, 0xc1, 0x7f, 0x00, 0x00, 0x00
0000DDA7: 00 00 00    ; 
0000DDAA: 7F 09 09 77 ; font_82 defb 0x7f, 0x09, 0x09, 0x77, 0x00, 0x00, 0x00
0000DDAE: 00 00 00    ; 
0000DDB1: 6F 49 49 7B ; font_83 defb 0x6f, 0x49, 0x49, 0x7b, 0x00, 0x00, 0x00
0000DDB5: 00 00 00    ; 
0000DDB8: 01 01 7F 01 ; font_84 defb 0x01, 0x01, 0x7f, 0x01, 0x01, 0x00, 0x00
0000DDBC: 01 00 00    ; 
0000DDBF: 7F 40 40 7F ; font_85 defb 0x7f, 0x40, 0x40, 0x7f, 0x00, 0x00, 0x00
0000DDC3: 00 00 00    ; 
0000DDC6: 7F 20 10 0F ; font_86 defb 0x7f, 0x20, 0x10, 0x0f, 0x00, 0x00, 0x00
0000DDCA: 00 00 00    ; 
0000DDCD: 7F 40 40 7F ; font_87 defb 0x7f, 0x40, 0x40, 0x7f, 0x40, 0x40, 0x7f
0000DDD1: 40 40 7F    ; 
0000DDD4: 77 08 08 77 ; font_88 defb 0x77, 0x08, 0x08, 0x77, 0x00, 0x00, 0x00
0000DDD8: 00 00 00    ; 
0000DDDB: 6F 48 48 7F ; font_89 defb 0x6f, 0x48, 0x48, 0x7f, 0x00, 0x00, 0x00
0000DDDF: 00 00 00    ; 
0000DDE2: 71 49 49 47 ; font_90 defb 0x71, 0x49, 0x49, 0x47, 0x00, 0x00, 0x00
0000DDE6: 00 00 00    ; 
0000DDE9: 7F 41 00 00 ; font_91 defb 0x7f, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00
0000DDED: 00 00 00    ; 
0000DDF0: 03 04 08 10 ; font_92 defb 0x03, 0x04, 0x08, 0x10, 0x60, 0x00, 0x00
0000DDF4: 60 00 00    ; 
0000DDF7: 41 7F 00 00 ; font_93 defb 0x41, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00
0000DDFB: 00 00 00    ; 
0000DDFE: 04 02 01 02 ; font_94 defb 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x00
0000DE02: 04 00 00    ; 
0000DE05: 80 80 80 80 ; font_95 defb 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00
0000DE09: 00 00 00    ; 
0000DE0C: 03 00 00 00 ; font_96 defb 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000DE10: 00 00 00    ; 
0000DE13: 74 54 54 7C ; font_97 defb 0x74, 0x54, 0x54, 0x7c, 0x00, 0x00, 0x00
0000DE17: 00 00 00    ; 
0000DE1A: 7F 44 44 7C ; font_98 defb 0x7f, 0x44, 0x44, 0x7c, 0x00, 0x00, 0x00
0000DE1E: 00 00 00    ; 
0000DE21: 7C 44 44 6C ; font_99 defb 0x7c, 0x44, 0x44, 0x6c, 0x00, 0x00, 0x00
0000DE25: 00 00 00    ; 
0000DE28: 7C 44 44 7F ; font_100 defb 0x7c, 0x44, 0x44, 0x7f, 0x00, 0x00, 0x00
0000DE2C: 00 00 00    ; 
0000DE2F: 7C 54 54 5C ; font_101 defb 0x7c, 0x54, 0x54, 0x5c, 0x00, 0x00, 0x00
0000DE33: 00 00 00    ; 
0000DE36: 7F 05 05 01 ; font_102 defb 0x7f, 0x05, 0x05, 0x01, 0x00, 0x00, 0x00
0000DE3A: 00 00 00    ; 
0000DE3D: BC A4 A4 FC ; font_103 defb 0xbc, 0xa4, 0xa4, 0xfc, 0x00, 0x00, 0x00
0000DE41: 00 00 00    ; 
0000DE44: 7F 04 04 7C ; font_104 defb 0x7f, 0x04, 0x04, 0x7c, 0x00, 0x00, 0x00
0000DE48: 00 00 00    ; 
0000DE4B: 7D 00 00 00 ; font_105 defb 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000DE4F: 00 00 00    ; 
0000DE52: 80 FD 00 00 ; font_106 defb 0x80, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00
0000DE56: 00 00 00    ; 
0000DE59: 7F 04 04 7A ; font_107 defb 0x7f, 0x04, 0x04, 0x7a, 0x00, 0x00, 0x00
0000DE5D: 00 00 00    ; 
0000DE60: 7F 00 00 00 ; font_108 defb 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000DE64: 00 00 00    ; 
0000DE67: 7C 04 04 7C ; font_109 defb 0x7c, 0x04, 0x04, 0x7c, 0x04, 0x04, 0x7c
0000DE6B: 04 04 7C    ; 
0000DE6E: 7C 04 04 7C ; font_110 defb 0x7c, 0x04, 0x04, 0x7c, 0x00, 0x00, 0x00
0000DE72: 00 00 00    ; 
0000DE75: 7C 44 44 7C ; font_111 defb 0x7c, 0x44, 0x44, 0x7c, 0x00, 0x00, 0x00
0000DE79: 00 00 00    ; 
0000DE7C: FC 44 44 7C ; font_112 defb 0xfc, 0x44, 0x44, 0x7c, 0x00, 0x00, 0x00
0000DE80: 00 00 00    ; 
0000DE83: 7C 44 44 FC ; font_113 defb 0x7c, 0x44, 0x44, 0xfc, 0x00, 0x00, 0x00
0000DE87: 00 00 00    ; 
0000DE8A: 7C 04 04 0C ; font_114 defb 0x7c, 0x04, 0x04, 0x0c, 0x00, 0x00, 0x00
0000DE8E: 00 00 00    ; 
0000DE91: 5C 54 54 74 ; font_115 defb 0x5c, 0x54, 0x54, 0x74, 0x00, 0x00, 0x00
0000DE95: 00 00 00    ; 
0000DE98: 7F 44 44 60 ; font_116 defb 0x7f, 0x44, 0x44, 0x60, 0x00, 0x00, 0x00
0000DE9C: 00 00 00    ; 
0000DE9F: 7C 40 40 7C ; font_117 defb 0x7c, 0x40, 0x40, 0x7c, 0x00, 0x00, 0x00
0000DEA3: 00 00 00    ; 
0000DEA6: 7C 20 10 0C ; font_118 defb 0x7c, 0x20, 0x10, 0x0c, 0x00, 0x00, 0x00
0000DEAA: 00 00 00    ; 
0000DEAD: 7C 40 40 7C ; font_119 defb 0x7c, 0x40, 0x40, 0x7c, 0x40, 0x40, 0x7c
0000DEB1: 40 40 7C    ; 
0000DEB4: 6C 10 10 6C ; font_120 defb 0x6c, 0x10, 0x10, 0x6c, 0x00, 0x00, 0x00
0000DEB8: 00 00 00    ; 
0000DEBB: BC A0 A0 FC ; font_121 defb 0xbc, 0xa0, 0xa0, 0xfc, 0x00, 0x00, 0x00
0000DEBF: 00 00 00    ; 
0000DEC2: 64 54 54 4C ; font_122 defb 0x64, 0x54, 0x54, 0x4c, 0x00, 0x00, 0x00
0000DEC6: 00 00 00    ; 
0000DEC9: 08 3E 41 00 ; font_123 defb 0x08, 0x3e, 0x41, 0x00, 0x00, 0x00, 0x00
0000DECD: 00 00 00    ; 
0000DED0: FF 00 00 00 ; font_124 defb 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0000DED4: 00 00 00    ; 
0000DED7: 41 3E 08 00 ; font_125 defb 0x41, 0x3e, 0x08, 0x00, 0x00, 0x00, 0x00
0000DEDB: 00 00 00    ; 
0000DEDE: 1C 04 1C 10 ; font_126 defb 0x1c, 0x04, 0x1c, 0x10, 0x1c, 0x00, 0x00
0000DEE2: 1C 00 00    ; 
0000DEE5:             ; 
0000DEE5:             ; 
0000DEE5:             ; 
0000DEE8:             ; ALIGN
0000DEE8:             ; INCLUDE general/usercode.s
0000DEE8:             ; usercode
0000DEE8:             ; 
0000DEE8:             ; 
0000DEE8:             ; 
0000DEE8: E3A00000    ; MOV R0, #0
0000DEEC: E3A01001    ; MOV R1, #1
0000DEF0: E3A02002    ; MOV R2, #2
0000DEF4: E3A03003    ; MOV R3, #3
0000DEF8: E3A04004    ; MOV R4, #4
0000DEFC: E3A05005    ; MOV R5, #5
0000DF00: E3A06006    ; MOV R6, #6
0000DF04: E3A07007    ; MOV R7, #7
0000DF08: E3A08008    ; MOV R8, #8
0000DF0C: E3A09009    ; MOV R9, #9
0000DF10: E3A0A00A    ; MOV R10, #10
0000DF14: E3A0B00B    ; MOV R11, #11
0000DF18: E3A0C00C    ; MOV R12, #12
0000DF1C:             ; 
0000DF1C: E28F0028    ; ADRL R0, thread2
0000DF20: EBFFCA18    ; BL create_thread
0000DF24:             ; 
0000DF24:             ; 
0000DF24:             ; 
0000DF24:             ; ; ~ 0xDE0C
0000DF24:             ; 
0000DF24:             ; ;BLEQ end_thread
0000DF24:             ; thread1
0000DF24: E2822001    ; ADD R2, R2, #1
0000DF28: E3520C01    ; CMP R2, #&100
0000DF2C: E92D0004    ; PUSH {R2}
0000DF30: 0AFFC83A    ; BEQ halt
0000DF34:             ; ;BEQ exit_thread
0000DF34: EAFFFFFA    ; B thread1
0000DF38:             ; 
0000DF38:             ; 
0000DF38:             ; 
0000DF38:             ; 
0000DF38: EAFFC838    ; B halt
0000DF3C: EAFFC837    ; B halt
0000DF40: EAFFC836    ; B halt
0000DF44: EAFFC835    ; B halt
0000DF48: EAFFC834    ; B halt
0000DF4C:             ; 
0000DF4C:             ; ; ~ 0xDE24
0000DF4C:             ; thread2
0000DF4C: E2833001    ; ADD R3, R3, #1
0000DF50: EAFFFFFD    ; B thread2
0000DF54:             ; 
0000DF54:             ; 
0000DF54:             ; exit_thread
0000DF54: E1A0C00D    ; MOV R12, SP
0000DF58: EF00010A    ; SVC svc_10
0000DF5C:             ; 
0000DF5C:             ; 
0000DF5C:             ; 
0000DF5C:             ; 
0000DF5C:             ; 
0000DF5C:             ; 
0000DF5C:             ; 
0000DF5C:             ; ;ADRL R1, colours
0000DF5C:             ; ;sam
0000DF5C:             ; ;SVC svc_7
0000DF5C:             ; ;CMP R3, #0
0000DF5C:             ; ;BEQ sam
0000DF5C:             ; ;MOV R0, R3
0000DF5C:             ; ;SVC svc_1
0000DF5C:             ; ;B sam
0000DF5C:             ; 
0000DF5C: 48 65 6C 6C ; hi DEFB "Hello world!",0
0000DF60: 6F 20 77 6F ; 
0000DF64: 72 6C 64 21 ; 
0000DF68: 00          ; 
0000DF69: 74 65 73 74 ; test DEFB "test 2",0
0000DF6D: 20 32 00    ; 
0000DF70:             ; colours
0000DF70: 00 00 00    ; DEFB 0x00, 0x00, 0x00
0000DF73: FF FF FF    ; DEFB 0xFF, 0xFF, 0xFF
0000DF76:             ; 
0000DF76:             ; 

Symbol Table: Labels
: halt                              00000020  Local -- ARM
: hard_reset                        00000028  Local -- ARM
: set_stack_loop                    00000068  Local -- ARM
: screenblankloop                   0000008C  Local -- ARM
: thread_register_wipe_loop_1       000000E8  Local -- ARM
: thread_register_wipe_loop_2       0000010C  Local -- ARM
: thread_IO_register_wipe_loop      00000128  Local -- ARM
: debounce_wipe_loop                00000160  Local -- ARM
: undefined_instruction_handler     000001F0  Local -- ARM
: prefetch_abort_handler            000001F4  Local -- ARM
: data_abort_handler                000001F8  Local -- ARM
: IRQ_handler                       000001FC  Local -- ARM
: timer_interrupt                   00000220  Local -- ARM
: keyboard_interrupt                00000240  Local -- ARM
: continueDivisionLoop              00000264  Local -- ARM
: exitDivision                      00000278  Local -- ARM
: unpushed                          000002A4  Local -- ARM
: pushed                            000002B0  Local -- ARM
: IRQ_quit                          000002BC  Local -- ARM
: FIQ_handler                       000002C4  Local -- ARM
: svc_handler                       000002C8  Local -- ARM
: svc_entry                         000002EC  Local -- ARM
: SVC_0                             00000338  Local -- ARM
: SVC_1                             0000033C  Local -- ARM
: SVC_2                             00000344  Local -- ARM
: SVC_3                             0000034C  Local -- ARM
: SVC_4                             00000360  Local -- ARM
: SVC_5                             00000364  Local -- ARM
: SVC_6                             0000036C  Local -- ARM
: SVC_7                             00000374  Local -- ARM
: SVC_8                             0000037C  Local -- ARM
: SVC_9                             00000384  Local -- ARM
: SVC_10                            0000038C  Local -- ARM
: SVC_exit                          00000394  Local -- ARM
: SVC_unknown                       000003A0  Local -- ARM
: printchar                         000003A4  Local -- ARM
: control_handler                   000003EC  Local -- ARM
: BS_handler                        00000418  Local -- ARM
: HT_handler                        00000438  Local -- ARM
: LF_handler                        00000458  Local -- ARM
: VT_handler                        00000468  Local -- ARM
: FF_handler                        00000478  Local -- ARM
: screenblankloop2                  00000484  Local -- ARM
: CR_handler                        00000494  Local -- ARM
: control_exit                      000004A8  Local -- ARM
: character_write                   000004BC  Local -- ARM
: font_line_return                  000004F4  Local -- ARM
: post_address_fetch                00000500  Local -- ARM
: pixel_write_return                00000510  Local -- ARM
: pixel_font                        00000578  Local -- ARM
: pixel_background                  00000594  Local -- ARM
: unknown_character                 000005B8  Local -- ARM
: printstr                          000005BC  Local -- ARM
: printloop                         000005C8  Local -- ARM
: printstr_exit                     000005DC  Local -- ARM
: set_cursorposx                    000005E8  Local -- ARM
: set_cursorposy                    00000600  Local -- ARM
: query_keyboard                    00000618  Local -- ARM
: keyboard_byte_loop                00000634  Local -- ARM
: keyboard_bit_loop                 0000063C  Local -- ARM
: quit                              00000668  Local -- ARM
: query_key                         00000674  Local -- ARM
: tempSP                            00000680  Local -- ARM
: tempR1                            00000684  Local -- ARM
: save_registers                    00000688  Local -- ARM
: sheduler                          000006E8  Local -- ARM
: thread_return                     0000071C  Local -- ARM
: get_free_position                 0000072C  Local -- ARM
: get_free_not_found                00000734  Local -- ARM
: search_block                      00000758  Local -- ARM
: search_block_loop_1               00000760  Local -- ARM
: create_thread                     00000788  Local -- ARM
: stack_search_loop                 000007AC  Local -- ARM
: free_thread_search_loop           000007EC  Local -- ARM
: free_thread_found                 00000808  Local -- ARM
: end_thread                        0000083C  Local -- ARM
: check_next_thread_loop            0000084C  Local -- ARM
: thread_index_found                00000874  Local -- ARM
: queue_push                        0000088C  Local -- ARM
: fail_push                         000008C0  Local -- ARM
: queue_push_quit                   000008C4  Local -- ARM
: queue_pop                         000008D0  Local -- ARM
: queue_shift_loop                  000008F4  Local -- ARM
: queue_pop_fail                    00000920  Local -- ARM
: queue_pop_quit                    00000924  Local -- ARM
: queue_utilisation                 00000930  Local -- ARM
: clear_queue                       00000950  Local -- ARM
: queue_wipe_loop                   00000964  Local -- ARM
: addr_keyboard_map_start           00000994  Local -- ARM
: addr_keyboard_map_end             000009A0  Local -- ARM
: LCD_width                         000003C0  Value
: FONT_WIDTH                        00000007  Value
: FONT_HEIGHT                       00000008  Value
: BS                                00000008  Value
: HT                                00000009  Value
: LF                                0000000A  Value
: VT                                0000000B  Value
: FF                                0000000C  Value
: CR                                0000000D  Value
: svc_0                             00000100  Value
: svc_1                             00000101  Value
: svc_2                             00000102  Value
: svc_3                             00000103  Value
: svc_4                             00000104  Value
: svc_5                             00000105  Value
: svc_6                             00000106  Value
: svc_7                             00000107  Value
: svc_8                             00000108  Value
: svc_9                             00000109  Value
: svc_10                            0000010A  Value
: SVC_MAX                           000009A0  Local -- ARM
: cursorposx                        000009A4  Local -- ARM
: cursorposy                        000009A8  Local -- ARM
: addr_LCD                          000009AC  Local -- ARM
: addr_LCD_end                      000009B0  Local -- ARM
: addr_timer                        000009B4  Local -- ARM
: addr_keyboard                     000009B8  Local -- ARM
: addr_keyboard_req                 000009BC  Local -- ARM
: addr_keyboard_dir                 000009C0  Local -- ARM
: addr_interrupts                   000009C4  Local -- ARM
: addr_interrupts_mask              000009C8  Local -- ARM
: addr_timer_compare                000009CC  Local -- ARM
: addr_timer_enable                 000009D0  Local -- ARM
: charwidth                         00000018  Value
: LCD_linediff                      00001E00  Value
: lcd_char_length                   00000028  Value
: lcd_char_height                   0000001E  Value
: MAX_THREADS                       00000004  Value
: THREAD_STACK_SIZE_BYTES           00002000  Value
: THREAD_STACK_SIZE_WORDS           00000800  Value
: thread                            000009D4  Local -- ARM
: thread_queue_items                000009D4  Local -- ARM
: addr_thread_queue_start           000009D8  Local -- ARM
: thread_queue_IO_items             000009E8  Local -- ARM
: addr_thread_IO_queue_start        000009EC  Local -- ARM
: thread_queue_register_map         000009FC  Local -- ARM
: thread_queue_registers            00000A0C  Local -- ARM
: thread_queue_registers_end        00000B1C  Local -- ARM
: thread_IO_queue_register_map      00000B1C  Local -- ARM
: thread_IO_queue_registers         00000B2C  Local -- ARM
: stack_user                        00000C3C  Local -- ARM
: stackend_user                     00002C3C  Local -- ARM
: stacks_in_use                     00002C3C  Local -- ARM
: stack_threads                     00002C4C  Local -- ARM
: stackend_threads                  0000AC4C  Local -- ARM
: stack_svc                         0000AC4C  Local -- ARM
: stackend_svc                      0000BC4C  Local -- ARM
: stack_IRQ                         0000BC4C  Local -- ARM
: stackend_IRQ                      0000CC4C  Local -- ARM
: stack_FIQ                         0000CC4C  Local -- ARM
: stackend_FIQ                      0000DC4C  Local -- ARM
: font_32                           0000DC4C  Local -- ARM
: font_33                           0000DC53  Local -- ARM
: font_34                           0000DC5A  Local -- ARM
: font_35                           0000DC61  Local -- ARM
: font_36                           0000DC68  Local -- ARM
: font_37                           0000DC6F  Local -- ARM
: font_38                           0000DC76  Local -- ARM
: font_39                           0000DC7D  Local -- ARM
: font_40                           0000DC84  Local -- ARM
: font_41                           0000DC8B  Local -- ARM
: font_42                           0000DC92  Local -- ARM
: font_43                           0000DC99  Local -- ARM
: font_44                           0000DCA0  Local -- ARM
: font_45                           0000DCA7  Local -- ARM
: font_46                           0000DCAE  Local -- ARM
: font_47                           0000DCB5  Local -- ARM
: font_48                           0000DCBC  Local -- ARM
: font_49                           0000DCC3  Local -- ARM
: font_50                           0000DCCA  Local -- ARM
: font_51                           0000DCD1  Local -- ARM
: font_52                           0000DCD8  Local -- ARM
: font_53                           0000DCDF  Local -- ARM
: font_54                           0000DCE6  Local -- ARM
: font_55                           0000DCED  Local -- ARM
: font_56                           0000DCF4  Local -- ARM
: font_57                           0000DCFB  Local -- ARM
: font_58                           0000DD02  Local -- ARM
: font_59                           0000DD09  Local -- ARM
: font_60                           0000DD10  Local -- ARM
: font_61                           0000DD17  Local -- ARM
: font_62                           0000DD1E  Local -- ARM
: font_63                           0000DD25  Local -- ARM
: font_64                           0000DD2C  Local -- ARM
: font_65                           0000DD33  Local -- ARM
: font_66                           0000DD3A  Local -- ARM
: font_67                           0000DD41  Local -- ARM
: font_68                           0000DD48  Local -- ARM
: font_69                           0000DD4F  Local -- ARM
: font_70                           0000DD56  Local -- ARM
: font_71                           0000DD5D  Local -- ARM
: font_72                           0000DD64  Local -- ARM
: font_73                           0000DD6B  Local -- ARM
: font_74                           0000DD72  Local -- ARM
: font_75                           0000DD79  Local -- ARM
: font_76                           0000DD80  Local -- ARM
: font_77                           0000DD87  Local -- ARM
: font_78                           0000DD8E  Local -- ARM
: font_79                           0000DD95  Local -- ARM
: font_80                           0000DD9C  Local -- ARM
: font_81                           0000DDA3  Local -- ARM
: font_82                           0000DDAA  Local -- ARM
: font_83                           0000DDB1  Local -- ARM
: font_84                           0000DDB8  Local -- ARM
: font_85                           0000DDBF  Local -- ARM
: font_86                           0000DDC6  Local -- ARM
: font_87                           0000DDCD  Local -- ARM
: font_88                           0000DDD4  Local -- ARM
: font_89                           0000DDDB  Local -- ARM
: font_90                           0000DDE2  Local -- ARM
: font_91                           0000DDE9  Local -- ARM
: font_92                           0000DDF0  Local -- ARM
: font_93                           0000DDF7  Local -- ARM
: font_94                           0000DDFE  Local -- ARM
: font_95                           0000DE05  Local -- ARM
: font_96                           0000DE0C  Local -- ARM
: font_97                           0000DE13  Local -- ARM
: font_98                           0000DE1A  Local -- ARM
: font_99                           0000DE21  Local -- ARM
: font_100                          0000DE28  Local -- ARM
: font_101                          0000DE2F  Local -- ARM
: font_102                          0000DE36  Local -- ARM
: font_103                          0000DE3D  Local -- ARM
: font_104                          0000DE44  Local -- ARM
: font_105                          0000DE4B  Local -- ARM
: font_106                          0000DE52  Local -- ARM
: font_107                          0000DE59  Local -- ARM
: font_108                          0000DE60  Local -- ARM
: font_109                          0000DE67  Local -- ARM
: font_110                          0000DE6E  Local -- ARM
: font_111                          0000DE75  Local -- ARM
: font_112                          0000DE7C  Local -- ARM
: font_113                          0000DE83  Local -- ARM
: font_114                          0000DE8A  Local -- ARM
: font_115                          0000DE91  Local -- ARM
: font_116                          0000DE98  Local -- ARM
: font_117                          0000DE9F  Local -- ARM
: font_118                          0000DEA6  Local -- ARM
: font_119                          0000DEAD  Local -- ARM
: font_120                          0000DEB4  Local -- ARM
: font_121                          0000DEBB  Local -- ARM
: font_122                          0000DEC2  Local -- ARM
: font_123                          0000DEC9  Local -- ARM
: font_124                          0000DED0  Local -- ARM
: font_125                          0000DED7  Local -- ARM
: font_126                          0000DEDE  Local -- ARM
: usercode                          0000DEE8  Local -- ARM
: thread1                           0000DF24  Local -- ARM
: thread2                           0000DF4C  Local -- ARM
: exit_thread                       0000DF54  Local -- ARM
: hi                                0000DF5C  Local -- ARM
: test                              0000DF69  Local -- ARM
: colours                           0000DF70  Local -- ARM
